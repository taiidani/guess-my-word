name: deploy

on:
  push:
    branches:
      - "main"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.outputs.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Tag Release
        run: git tag $(date +'%Y.%m.%d')-${GITHUB_SHA::4}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set output
        id: outputs
        run: echo "version=${{ steps.goreleaser.outputs.artifacts }}" >> "$GITHUB_OUTPUT"

      - name: Debugging
        run: |
          echo ${{ steps.goreleaser.outputs.artifacts }}

  deploy:
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://guessmyword.xyz
    concurrency: deployment
    permissions:
      contents: read
      id-token: write # Needed for Vault JWT
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: vault
        id: vault
        uses: hashicorp/vault-action@v2
        with:
          url: https://rnd.vault.0846e66f-a975-4a88-9e46-6dc6267e9b73.aws.hashicorp.cloud:8200
          role: github-role
          method: jwt
          path: github
          namespace: admin
          jwtGithubAudience: https://github.com/taiidani
          secrets: |
            credentials/data/github TFC_TOKEN | TFC_TOKEN


      - name: setup-terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.4.2
          cli_config_credentials_token: ${{ steps.vault.outputs.TFC_TOKEN }}

      - name: init
        working-directory: .github/deploy
        run: terraform init

      - name: validate
        working-directory: .github/deploy
        run: terraform validate -no-color

      - name: apply
        working-directory: .github/deploy
        run: terraform apply -auto-approve -input=false -var 'version=${{needs.release.outputs.version}}'
